from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.utils.funcs import (
    add_balance_with_notification,
    format_user_mention,
    notify_admins,
)
import re
from config.parameters_manager import ParametersManager
import os
import zipfile
import rarfile
import shutil
import json
from pathlib import Path
import time

from db.database import Database
from aiogram import Bot
from client.session_manager import SessionManager
import logging
from aiogram_album import AlbumMessage
from aiogram_album.ttl_cache_middleware import TTLCacheAlbumMiddleware
from bot.utils.pagination import Paginator

logger = logging.getLogger(__name__)

router = Router(name="admin")
db = Database()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–æ–≤
TTLCacheAlbumMiddleware(router=router)


class AdminStates(StatesGroup):
    waiting_for_parameter = State()
    waiting_for_value = State()
    waiting_for_session_file = State()
    waiting_for_json_file = State()
    waiting_for_admin_id = State()
    waiting_for_balance_edit = State()
    waiting_for_archive = State()
    waiting_for_broadcast = State()
    waiting_for_ref_code = State()

async def admin_menu_base(message: types.Message, user_id: int):
    if db.get_user(message.from_user.id).is_admin:
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="edit_params"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üì± –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Å—Å–∏–π", callback_data="view_sessions"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="upload_session"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="edit_balance"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="reboot_server"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="view_codes"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", callback_data="export_payments"
                    )
                ],
            ]
        )
        await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)

@router.message(Command("admin"))
async def admin_menu(message: types.Message):
    await admin_menu_base(message, message.from_user.id)


@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: types.CallbackQuery):
    await admin_menu_base(callback.message, callback.from_user.id)


@router.callback_query(F.data == "edit_params")
async def show_parameters(callback: types.CallbackQuery):
    params = ParametersManager._config
    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}"
    )
    text = "üìã –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n"
    for param, value in params.items():
        text += f"‚Ä¢ {param}: {value}\n"

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä", callback_data="change_param"
                )
            ],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")],
        ]
    )
    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data == "change_param")
async def select_parameter(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –Ω–∞—á–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    params = ParametersManager._config
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=param, callback_data=f"param_{param}")]
            for param in params.keys()
        ]
    )
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("param_"))
async def enter_new_value(callback: types.CallbackQuery, state: FSMContext):
    param_name = callback.data.replace("param_", "")
    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä {param_name} –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    )
    await state.update_data(selected_param=param_name)
    await state.set_state(AdminStates.waiting_for_value)
    current_value = ParametersManager.get_parameter(param_name)
    logger.debug(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param_name}: {current_value}")
    await callback.message.edit_text(
        f"–ü–∞—Ä–∞–º–µ—Ç—Ä: {param_name}\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    )


@router.message(AdminStates.waiting_for_value)
async def save_new_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    param_name = data["selected_param"]
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä {param_name}")

    try:
        current_value = ParametersManager.get_parameter(param_name)
        new_value = type(current_value)(message.text)
        ParametersManager.set_parameter(param_name, new_value)
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_value}")
        await message.answer(
            f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_value}"
        )
    except ValueError:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param_name}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
        )
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è")

    await state.clear()
    await admin_menu(message)


@router.callback_query(F.data == "upload_session")
async def request_archive(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Å—Å–∏–π")
    await state.set_state(AdminStates.waiting_for_archive)
    await callback.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∏–ª–∏ RAR –∞—Ä—Ö–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤ .session –∏ .json\n"
        "‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∏–º–µ–Ω–∞–º–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã"
    )


@router.message(AdminStates.waiting_for_archive, F.document)
async def handle_archive(message: types.Message, state: FSMContext, bot: Bot):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞—Ä—Ö–∏–≤ —Å —Å–µ—Å—Å–∏—è–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")

    if not message.document.file_name.endswith((".zip", ".rar")):
        logger.warning(
            f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}"
        )
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .zip –∏–ª–∏ .rar")
        return

    try:
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞")
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = "temp_sessions"
        os.makedirs(temp_dir, exist_ok=True)

        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        archive_path = f"{temp_dir}/archive"
        file = await bot.get_file(message.document.file_id)
        await bot.download_file(file.file_path, archive_path)

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        extract_dir = f"{temp_dir}/extracted"
        os.makedirs(extract_dir, exist_ok=True)

        if message.document.file_name.endswith(".zip"):
            with zipfile.ZipFile(archive_path, "r") as zip_ref:
                zip_ref.extractall(extract_dir)
        else:
            with rarfile.RarFile(archive_path, "r") as rar_ref:
                rar_ref.extractall(extract_dir)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        errors, valid_pairs = await validate_sessions(extract_dir)

        if errors:
            error_text = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ—à–∏–±–∫–∏:\n" + "\n".join(errors)
            await message.answer(error_text)
            return

        if not valid_pairs:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä —Ñ–∞–π–ª–æ–≤ session/json")
            return

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        sessions_dir = "client/sessions"
        os.makedirs(sessions_dir, exist_ok=True)

        # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        for name in valid_pairs:
            shutil.copy(
                f"{extract_dir}/{name}.session", f"{sessions_dir}/{name}.session"
            )
            shutil.copy(f"{extract_dir}/{name}.json", f"{sessions_dir}/{name}.json")

        await message.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(valid_pairs)} —Å–µ—Å—Å–∏–π:\n"
            + "\n".join(f"‚Ä¢ {name}" for name in valid_pairs)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞: {str(e)}")

    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        shutil.rmtree(temp_dir, ignore_errors=True)
        await state.clear()
        await admin_menu(message)


@router.callback_query(F.data == "view_sessions")
async def view_sessions(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–µ—Å—Å–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Å—Å–∏–π")
    session_manager = SessionManager("client/sessions")
    sessions = session_manager.get_sessions_info()

    if not sessions:
        logger.info("–°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await callback.message.edit_text(
            "üì± –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                        )
                    ]
                ]
            ),
        )
        return

    def session_callback(session: dict) -> tuple[str, str]:
        status = "üî¥" if session["is_active"] else "‚ö™Ô∏è"
        return f"{status} {session['phone']}", f"session_info_{session['session_name']}"

    paginator = Paginator(
        items=sessions,
        items_per_page=4,
        callback_prefix="sessions",
        item_callback=session_callback,
    )

    await callback.message.edit_text(
        "üì± –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π:", reply_markup=paginator.get_page_keyboard(0)
    )


@router.callback_query(F.data.startswith("sessions_page_"))
async def handle_sessions_page(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    page = int(callback.data.split("_")[-1])
    session_manager = SessionManager("client/sessions")
    sessions = session_manager.get_sessions_info()

    def session_callback(session: dict) -> tuple[str, str]:
        status = "üî¥" if session["is_active"] else "‚ö™Ô∏è"
        return f"{status} {session['phone']}", f"session_info_{session['session_name']}"

    paginator = Paginator(
        items=sessions,
        items_per_page=4,
        callback_prefix="sessions",
        item_callback=session_callback,
    )

    await callback.message.edit_text(
        "üì± –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π:", reply_markup=paginator.get_page_keyboard(page)
    )


@router.callback_query(F.data.startswith("session_info_"))
async def show_session_info(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    session_name = callback.data.replace("session_info_", "")
    session_manager = SessionManager("client/sessions")
    sessions = session_manager.get_sessions_info()

    session = next((s for s in sessions if s["session_name"] == session_name), None)
    if not session:
        await callback.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    status = "üî¥ –ê–∫—Ç–∏–≤–Ω–∞" if session["is_active"] else "‚ö™Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á"
    text = (
        f"üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏:\n\n"
        f"‚Ä¢ {status}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {session['phone']}\n"
        f"üë§ Username: @{session['username']}\n"
        f"üìù –ò–º—è: {session['first_name']} {session['last_name']}\n"
        f"üîë –§–∞–π–ª: {session['session_name']}"
    )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é",
                    callback_data=f"delete_session_{session_name}",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="view_sessions"
                )
            ],
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("delete_session_"))
async def delete_session(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    session_name = callback.data.replace("delete_session_", "")
    session_path = f"client/sessions/{session_name}"

    try:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
        if os.path.exists(f"{session_path}.session"):
            os.remove(f"{session_path}.session")
        if os.path.exists(f"{session_path}.json"):
            os.remove(f"{session_path}.json")

        await callback.answer("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        await view_sessions(callback, None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")


@router.callback_query(F.data == "edit_balance")
async def edit_balance(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    await callback.message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>user_id —Å—É–º–º–∞</code>",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                    )
                ]
            ]
        ),
    )
    await state.set_state(AdminStates.waiting_for_balance_edit)


@router.message(AdminStates.waiting_for_balance_edit, F.text.regexp(r"^-?\d+ -?\d+$"))
async def process_balance_edit(message: types.Message, state: FSMContext, bot: Bot):
    if not db.get_user(message.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
        )
        return

    await state.clear()
    user_id, new_balance = map(int, message.text.split())
    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–∑–º–µ–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {new_balance}"
    )

    user = db.get_user(user_id)
    if not user:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                        )
                    ]
                ]
            ),
        )
        return

    logger.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user.balance}")
    await add_balance_with_notification(user_id, new_balance, bot)
    logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_balance}")

    await message.answer(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_balance} ‚ÇΩ",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                    )
                ]
            ]
        ),
    )


@router.callback_query(F.data == "add_admin")
async def request_admin_id(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    )
    await state.set_state(AdminStates.waiting_for_admin_id)
    await callback.message.answer(
        "üëë –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                    )
                ]
            ]
        ),
    )


@router.message(AdminStates.waiting_for_admin_id)
async def process_admin_add(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        logger.warning(
            f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}: {message.text}"
        )
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)"
        )
        return

    user_id = int(message.text)
    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    )

    user = db.get_user(user_id)
    if not user:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                        )
                    ]
                ]
            ),
        )
        return

    if user.is_admin:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                        )
                    ]
                ]
            ),
        )
        return

    db.set_admin(user_id, True)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    await state.clear()

    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                    )
                ]
            ]
        ),
    )


@router.callback_query(F.data == "reboot_server")
async def confirm_reboot(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"
    )
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_reboot"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin"
                ),
            ]
        ]
    )
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?",
        reply_markup=keyboard,
    )


@router.callback_query(F.data == "confirm_reboot")
async def reboot_server(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞"
    )
    await callback.message.edit_text("üîÑ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    await notify_admins(
        callback.bot,
        f"üîÑ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {format_user_mention(callback.from_user.id, callback.from_user.username)}",
    )

    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    os.system("sudo /sbin/reboot")  # –î–ª—è Linux
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è Windows: os.system("shutdown /r /t 1")


@router.callback_query(F.data == "broadcast")
async def request_broadcast_message(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
    await state.set_state(AdminStates.waiting_for_broadcast)
    await callback.message.answer(
        "üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.)",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                    )
                ]
            ]
        ),
    )


@router.message(AdminStates.waiting_for_broadcast, F.media_group_id)
async def process_broadcast_album(message: AlbumMessage, state: FSMContext):
    if not db.get_user(message.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
        )
        return

    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–ª—å–±–æ–º–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    users = db.get_all_users()
    total_users = len(users)

    await message[0].answer(
        f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –∞–ª—å–±–æ–º–∞ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º..."
    )

    success_count = 0
    error_count = 0

    media_group = [msg.as_input_media() for msg in message]

    for user in users:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message[0].bot.send_media_group(
                chat_id=user.user_id, media=media_group
            )
            success_count += 1
            logger.debug(f"–ê–ª—å–±–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")
        except Exception as e:
            error_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

    logger.info(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∞–ª—å–±–æ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {error_count}"
    )

    await message[0].answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∞–ª—å–±–æ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                    )
                ]
            ]
        ),
    )

    await state.clear()


@router.message(AdminStates.waiting_for_broadcast)
async def process_broadcast(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not db.get_user(message.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
        )
        return

    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    users = db.get_all_users()
    total_users = len(users)

    await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")

    success_count = 0
    error_count = 0

    for user in users:
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.copy_to(user.user_id)
            success_count += 1
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")
        except Exception as e:
            error_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {error_count}")

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                    )
                ]
            ]
        ),
    )

    await state.clear()


@router.callback_query(F.data == "view_codes")
async def view_codes(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    codes = db.get_all_referral_links_statistics()

    text = "üìä –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:"
    keyboard = [
        [
            types.InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="create_ref_link"
            )
        ]
    ]

    if not codes:
        keyboard.append(
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        )
        await callback.message.edit_text(
            text + "\n\nüì± –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        )
        return

    def code_callback(code: dict) -> tuple[str, str]:
        return (
            f"üìä {code['code']} ({code['users_count']})",
            f"code_info_{code['code']}",
        )

    paginator = Paginator(
        items=codes,
        items_per_page=5,
        callback_prefix="codes",
        item_callback=code_callback,
    )

    keyboard = paginator.get_page_keyboard(0)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ –Ω–∞—á–∞–ª–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard.inline_keyboard.insert(
        0,
        [
            types.InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="create_ref_link"
            )
        ],
    )

    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("codes_page_"))
async def handle_codes_page(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    page = int(callback.data.split("_")[-1])
    codes = db.get_all_referral_links_statistics()

    def code_callback(code: dict) -> tuple[str, str]:
        return (
            f"üìä {code['code']} ({code['users_count']})",
            f"code_info_{code['code']}",
        )

    paginator = Paginator(
        items=codes,
        items_per_page=5,
        callback_prefix="codes",
        item_callback=code_callback,
    )

    await callback.message.edit_text(
        "üìä –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:", reply_markup=paginator.get_page_keyboard(page)
    )


@router.callback_query(F.data.startswith("code_info_"))
async def show_code_info(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    code = callback.data.replace("code_info_", "")
    code_data = db.get_link_statistics(code)

    if not code_data:
        await callback.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    bot_info = await callback.bot.get_me()
    bot_username = bot_info.username

    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {code}:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {code_data['users_count']}\n"
        f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {code_data['total_payments']} ‚ÇΩ\n\n"
        f"üîó –°—Å—ã–ª–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: https://t.me/{bot_username}?start={code_data['code']}"
    )

    keyboard = []

    keyboard.append(
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", callback_data="view_codes")]
    )

    await callback.message.edit_text(
        text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data == "create_ref_link")
async def create_ref_link(callback: types.CallbackQuery, state: FSMContext):
    if not db.get_user(callback.from_user.id).is_admin:
        return

    await state.set_state(AdminStates.waiting_for_ref_code)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: vk_com, telegram_ads):",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_codes")]
            ]
        ),
    )


@router.message(AdminStates.waiting_for_ref_code)
async def process_ref_code(message: types.Message, state: FSMContext):
    if not db.get_user(message.from_user.id).is_admin:
        return

    code = message.text.strip()
    if not code:
        await message.answer("‚ùå –ú–µ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–ª—è URL —Å–∏–º–≤–æ–ª—ã
    if not re.match("^[a-zA-Z0-9_-]+$", code):
        await message.answer(
            "‚ùå –ú–µ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ"
        )
        return

    ref_link = db.create_referral_link(code)
    bot_info = await message.bot.get_me()
    bot_username = bot_info.username

    await message.answer(
        f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üîó https://t.me/{bot_username}?start={ref_link.code}\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å—Ç–æ—á–Ω–∏–∫–∏'",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üìä –ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", callback_data="view_codes"
                    )
                ]
            ]
        ),
    )
    await state.clear()


@router.callback_query(F.data == "export_payments")
async def export_payments(callback: types.CallbackQuery):
    if not db.get_user(callback.from_user.id).is_admin:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        return

    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"
    )

    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        filename = f"payments_history_{int(time.time())}.csv"

        with open(filename, "w", encoding="utf-8-sig") as f:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            f.write("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;–°—É–º–º–∞;–î–∞—Ç–∞\n")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
            payments = db.get_all_payments()
            for payment in payments:
                print(payment)
                f.write(
                    f"{payment.user_id};{payment.amount};{payment.created_at}\n"
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            types.FSInputFile(filename, filename=filename),
            caption="‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤—ã–≥—Ä—É–∂–µ–Ω–∞!",
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)

        logger.info("–í—ã–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"
                        )
                    ]
                ]
            ),
        )


async def validate_sessions(sessions_dir: str) -> tuple[list, list]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ .session –∏ .json —Ñ–∞–π–ª–æ–≤

    Returns:
        tuple[list, list]: (—Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫, —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä —Ñ–∞–π–ª–æ–≤)
    """
    logger.info(f"–ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {sessions_dir}")
    errors = []
    valid_pairs = []

    session_files = set(Path(sessions_dir).glob("*.session"))
    json_files = set(Path(sessions_dir).glob("*.json"))

    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ .session —Ñ–∞–π–ª–æ–≤: {len(session_files)}")
    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ .json —Ñ–∞–π–ª–æ–≤: {len(json_files)}")

    session_names = {f.stem for f in session_files}
    json_names = {f.stem for f in json_files}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .session —Ñ–∞–π–ª—ã –±–µ–∑ –ø–∞—Ä—ã
    for name in session_names - json_names:
        error_msg = f"‚ùå –§–∞–π–ª {name}.session –Ω–µ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ .json —Ñ–∞–π–ª–∞"
        logger.warning(error_msg)
        errors.append(error_msg)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .json —Ñ–∞–π–ª—ã –±–µ–∑ –ø–∞—Ä—ã
    for name in json_names - session_names:
        error_msg = f"‚ùå –§–∞–π–ª {name}.json –Ω–µ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ .session —Ñ–∞–π–ª–∞"
        logger.warning(error_msg)
        errors.append(error_msg)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä—ã
    for name in session_names & json_names:
        try:
            with open(f"{sessions_dir}/{name}.json") as f:
                json.load(f)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
            logger.debug(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞—Ä–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ {name}")
            valid_pairs.append(name)
        except json.JSONDecodeError:
            error_msg = f"‚ùå –§–∞–π–ª {name}.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"
            logger.error(error_msg)
            errors.append(error_msg)

    logger.info(
        f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(valid_pairs)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä –∏ {len(errors)} –æ—à–∏–±–æ–∫"
    )
    return errors, valid_pairs
