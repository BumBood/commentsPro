import copy
import logging
from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.utils.funcs import notify_admins
from config.parameters_manager import ParametersManager
from db.database import Database

from .keyboards import start_keyboard

router = Router(name="start")
db = Database()


@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    args = message.text.split()[1] if len(message.text.split()) > 1 else None

    user, is_new = db.get_or_create_or_update_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.first_name,
        referrer_code=args,
    )

    await state.clear()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} /start")

    keyboard = copy.deepcopy(start_keyboard)

    if args:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
        db.get_or_create_referral_link(args)

    if is_new:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        admin_message = (
            f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
            f"ID: <code>{message.from_user.id}</code>\n"
            f"–ò–º—è: {message.from_user.first_name}\n"
            f"Username: @{message.from_user.username}"
        )

        if args:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
            stats = db.get_link_statistics(args)
            if stats:
                admin_message += (
                    f"\n–ú–µ—Ç–∫–∞: {args}, –≤—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {stats['users_count']}"
                )

        await notify_admins(message.bot, admin_message)

    if user.is_admin:
        keyboard.inline_keyboard.append(
            [
                types.InlineKeyboardButton(
                    text="üëë –ê–¥–º–∏–Ω–∫–∞", callback_data="back_to_admin"
                )
            ]
        )

    await message.answer(
        text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} ‚ÇΩ\n–í–∞—à ID: <code>{message.from_user.id}</code>",
        reply_markup=keyboard,
        parse_mode="HTML",
    )

@router.callback_query(F.data == "support")
async def support_callback(callback: types.CallbackQuery):
    await callback.message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}")

