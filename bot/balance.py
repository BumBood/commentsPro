import logging
from aiogram import Bot, Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import time
from bot.freekassa import FreeKassa
from bot.utils.funcs import add_balance_with_notification
from config.parameters_manager import ParametersManager
from db.database import Database
from bot.keyboards import payment_keyboard
import os
from aiogram.types import LabeledPrice, PreCheckoutQuery, Message
import json


router = Router(name="balance")
db = Database()

freekassa = FreeKassa(
    shop_id=int(ParametersManager.get_parameter("shop_id")),
    secret_word_1=str(ParametersManager.get_parameter("secret_word_1")),
    secret_word_2=str(ParametersManager.get_parameter("secret_word_2")),
)


class DepositStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_payment = State()


@router.callback_query(F.data == "deposit")
async def deposit_start(callback: types.CallbackQuery):
    await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=payment_keyboard)


@router.callback_query(F.data.startswith("payment|"))
async def payment(callback: types.CallbackQuery, state: FSMContext):
    temp_data = callback.data.split("|")[1]

    if temp_data == "freeKassa":
        method = "FreeKassa"
        await state.update_data(payment_method=method)

    elif temp_data == "yooKassa":
        method = "–ÆKassa"
        await state.update_data(payment_method=method)

    await state.set_state(DepositStates.waiting_for_amount)
    await callback.message.answer(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º {ParametersManager.get_parameter('parse_comments_cost')}‚ÇΩ):\n\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É {method}\n"
        "üéâ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n"
        f"* –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –Ω–µ—Ç –∑–¥–µ—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}"
    )

@router.message(DepositStates.waiting_for_amount)
async def process_deposit_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount < int(ParametersManager.get_parameter('parse_comments_cost')):
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - {ParametersManager.get_parameter('parse_comments_cost')}‚ÇΩ")
            return
        

        try:
            data = await state.get_data()

            order_id = f"{message.from_user.id}_{int(time.time())}"

            if data['payment_method'] == "FreeKassa":
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ FreeKassa
                payment = freekassa.generate_payment_url(
                    amount=amount,
                    order_id=order_id,
                )

                logging.debug(f"–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {payment}")

                if not payment:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {message.from_user.id}")
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    await state.clear()
                    return

                keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment)],
                        [
                            types.InlineKeyboardButton(
                                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment"
                            )
                        ],
                    ]
                )

                await message.answer(
                    f"üí∞ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω\n"
                    f"ID –ø–ª–∞—Ç–µ–∂–∞: {message.from_user.id}_{int(time.time())}\n\n"
                    "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª\n"
                    "2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n"
                    "3. –î–µ–Ω—å–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n"
                    f"–ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}",
                    reply_markup=keyboard,
                )

            elif data['payment_method'] == "–ÆKassa":
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –ÆKassa
                if amount > 100000:  # –ÆKassa –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 100000 —Ä—É–±–ª–µ–π
                    await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100000‚ÇΩ")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
                amount_kopeks = int(amount * 100)
                label = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
                if amount_kopeks <= 0:
                    await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                    return

                prices = [LabeledPrice(label=label, amount=amount_kopeks)]

                currency = "RUB"

                provider_data = {
                "receipt": {
                    "items": [
                    {
                        "description": label,
                        "quantity": "1.00",
                        "amount": {
                            "value": f"{amount_kopeks / 100:.2f}",
                            "currency": currency
                        },
                        "vat_code": 1
                    }
                    ]
                }
                }

                await message.answer_invoice(
                    title=label,
                    description='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
                    payload=order_id,
                    provider_token=os.getenv('YOOKASSA_TOKEN'),
                    currency=currency,
                    prices=prices,
                    need_phone_number=True,
                    send_phone_number_to_provider=True,
                    provider_data=json.dumps(provider_data)
                )

                await state.clear()


        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º")


@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")


@router.callback_query(F.data.startswith("deposit_"))
async def auto_deposit(callback: types.CallbackQuery):
    try:
        amount = int(callback.data.split("_")[1])
        if amount < int(ParametersManager.get_parameter('parse_comments_cost')):
            await callback.message.answer(f"‚ùó –í–∞—à–∞ —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤ {ParametersManager.get_parameter('parse_comments_cost')}‚ÇΩ")
            amount = int(ParametersManager.get_parameter('parse_comments_cost'))

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ FreeKassa
        payment = freekassa.generate_payment_url(
            amount=amount,
            order_id=f"{callback.from_user.id}_{int(time.time())}",
        )

        logging.debug(f"–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {payment}")

        if not payment:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {callback.from_user.id}")
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment)],
                [
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment"
                    )
                ],
            ]
        )

        await callback.message.answer(
            f"üí∞ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω\n"
            f"ID –ø–ª–∞—Ç–µ–∂–∞: {callback.from_user.id}_{int(time.time())}\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª\n"
            "2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n"
            "3. –î–µ–Ω—å–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n"
            f"–ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {ParametersManager.get_parameter('support_link')}",
            reply_markup=keyboard,
        )

        await callback.message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        

# –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —é–ö–∞—Å—Å—ã
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    try:
        await pre_checkout_query.answer(ok=True)  # –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞ —Ç–∏–ø–∞ PreCheckoutQuery: {e}")


@router.message(F.successful_payment)
async def process_successful_payment(message: Message, bot: Bot):
    try:
        user_id = message.from_user.id
        amount = message.successful_payment.total_amount / 100
        await add_balance_with_notification(user_id, float(amount), bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")



