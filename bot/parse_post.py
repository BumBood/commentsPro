import asyncio
import logging
import os
import re

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from client.comments_parser import CommentParser
from config.parameters_manager import ParametersManager
from db.database import Database

router = Router(name="post")
db = Database()
parser = CommentParser("client/sessions")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class PostStates(StatesGroup):
    waiting_for_post_link = State()


def is_valid_telegram_link(link: str) -> bool:
    pattern = r"https?://t\.me/[a-zA-Z0-9_]+/\d+"
    return bool(re.match(pattern, link))


@router.callback_query(F.data == "collect_comments")
async def get_post_link(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    await callback.message.answer(
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {ParametersManager.get_parameter('free_comments_limit')}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {ParametersManager.get_parameter('parse_comments_cost')}‚ÇΩ\n"
        f"–õ–∏–º–∏—Ç –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ - 50000 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç:"
    )
    await state.set_state(PostStates.waiting_for_post_link)


@router.message(PostStates.waiting_for_post_link)
async def process_post_link(message: types.Message, state: FSMContext):
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}"
    )

    if not is_valid_telegram_link(message.text):
        logger.warning(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}"
        )
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ Telegram."
        )
        return

    try:
        new_message = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Å—Ç...")
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        logger.debug(f"–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞: {message.text}")
        comments_count = await parser.get_comments_count(message.text)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if comments_count == 0:
            logger.info(f"–ü–æ—Å—Ç –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await new_message.edit_text(
                "‚ùå –í —ç—Ç–æ–º –ø–æ—Å—Ç–µ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É",
                                callback_data="collect_comments",
                            )
                        ]
                    ]
                ),
            )
            await state.clear()
            return

        free_limit = ParametersManager.get_parameter("free_comments_limit")
        parse_cost = ParametersManager.get_parameter("parse_comments_cost")

        logger.info(f"–ü–æ—Å—Ç –∏–º–µ–µ—Ç {comments_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–ª–∏–º–∏—Ç: {free_limit})")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(post_link=message.text)

        if comments_count > free_limit:
            user = db.get_user(message.from_user.id)
            logger.info(
                f"–ü–ª–∞—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}. –ë–∞–ª–∞–Ω—Å: {user.balance}"
            )

            text = (
                f"–í –ø–æ—Å—Ç–µ {comments_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n"
                f"–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:\n"
                f"1. –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–µ—Ä–≤—ã–µ {free_limit} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
                f"2. –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞ {parse_cost}‚ÇΩ\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ"
            )

            buttons = [
                [
                    types.InlineKeyboardButton(
                        text=f"üÜì –ü–µ—Ä–≤—ã–µ {free_limit} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                        callback_data="parse_free_limit",
                    )
                ]
            ]

            if user.balance >= parse_cost:
                buttons.append(
                    [
                        types.InlineKeyboardButton(
                            text=f"üí∞ –í—Å–µ –∑–∞ {parse_cost}‚ÇΩ",
                            callback_data="start_parsing",
                        )
                    ]
                )
            else:
                buttons.append(
                    [
                        types.InlineKeyboardButton(
                            text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit"
                        )
                    ]
                )

            if user.is_admin:
                buttons.append(
                    [
                        types.InlineKeyboardButton(
                            text="üîì –ü–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω", callback_data="start_parsing"
                        )
                    ]
                )

            await new_message.edit_text(
                text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
            )
            return
        else:
            logger.info(f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            text = f"–í –ø–æ—Å—Ç–µ {comments_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n–ü–∞—Ä—Å–∏–Ω–≥ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π (–ª–∏–º–∏—Ç: {free_limit})."

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="start_parsing"
                    )
                ]
            ]
        )
        await new_message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}",
            exc_info=True,
        )
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å—Ç–∞: {str(e)}")
        await state.clear()


@router.callback_query(F.data == "start_parsing")
async def start_parsing(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

    data = await state.get_data()
    post_link = data.get("post_link")

    if not post_link:
        logger.error(
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        await callback.message.answer("–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return

    await callback.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_path = f"comments_{callback.from_user.id}.xlsx"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    asyncio.create_task(process_parsing(callback, post_link, file_path))

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É
    await state.clear()


@router.callback_query(F.data == "parse_free_limit")
async def start_parsing_with_limit(callback: types.CallbackQuery, state: FSMContext):
    logger.info(
        f"–ù–∞—á–∞–ª–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ª–∏–º–∏—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
    )

    data = await state.get_data()
    post_link = data.get("post_link")

    if not post_link:
        logger.error(
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
        await callback.message.answer("–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return

    await callback.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_path = f"comments_{callback.from_user.id}.xlsx"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    asyncio.create_task(process_parsing(callback, post_link, file_path, True))

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


async def process_parsing(
    callback: types.CallbackQuery,
    post_link: str,
    file_path: str,
    use_limit: bool = False,
):
    free_limit = ParametersManager.get_parameter("free_comments_limit")

    try:
        logger.debug(f"–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞: {post_link}")

        last_progress = 0
        df_dict = None

        async for progress, data in parser.parse_comments(
            post_link, limit=free_limit if use_limit else None
        ):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ 5% –∏–ª–∏ –±–æ–ª—å—à–µ
            if progress - last_progress >= 5:
                await callback.message.edit_text(
                    f"‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {progress}%"
                )
                last_progress = progress

            if data is not None:
                df_dict = data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª: {file_path}")
        parser.save_to_excel(df_dict, file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
        with open(file_path, "rb"):
            await callback.message.delete()
            await callback.message.answer_document(
                types.FSInputFile(file_path, filename="comments.xlsx"),
                caption="‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!",
            )

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        comments_count = len(df_dict["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"])
        if comments_count > free_limit:
            parse_cost = ParametersManager.get_parameter("parse_comments_cost")
            logger.info(
                f"–°–ø–∏—Å–∞–Ω–∏–µ {parse_cost} —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
            )
            db.update_balance(callback.from_user.id, -parse_cost)

        logger.info(
            f"–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
        )
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {str(e)}",
            exc_info=True,
        )
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                logger.debug(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
